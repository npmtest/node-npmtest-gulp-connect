{"/home/travis/build/npmtest/node-npmtest-gulp-connect/test.js":"/* istanbul instrument in package npmtest_gulp_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-connect/lib.npmtest_gulp_connect.js":"/* istanbul instrument in package npmtest_gulp_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_connect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_connect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-connect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-connect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_connect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_connect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_connect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_connect.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_connect.__dirname +\n                    '/lib.npmtest_gulp_connect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-connect/gulp-connect/index.js":"// Generated by CoffeeScript 1.10.0\nvar ConnectApp, apps, connect, es, fs, http, http2, https, liveReload, path, tiny_lr, util;\n\npath = require(\"path\");\n\nes = require(\"event-stream\");\n\nutil = require(\"gulp-util\");\n\nhttp = require(\"http\");\n\nhttps = require(\"https\");\n\nfs = require(\"fs\");\n\nconnect = require(\"connect\");\n\nliveReload = require(\"connect-livereload\");\n\ntiny_lr = require(\"tiny-lr\");\n\napps = [];\n\nhttp2 = void 0;\n\ntry {\n  http2 = require('http2');\n} catch (undefined) {}\n\nConnectApp = (function() {\n  function ConnectApp(options) {\n    this.name = options.name || \"Server\";\n    this.port = options.port || \"8080\";\n    this.root = options.root || path.dirname(module.parent.id);\n    this.host = options.host || \"localhost\";\n    this.debug = options.debug || false;\n    this.silent = options.silent || false;\n    this.https = options.https || false;\n    this.livereload = options.livereload || false;\n    this.middleware = options.middleware || void 0;\n    this.serverInit = options.serverInit || void 0;\n    this.fallback = options.fallback || void 0;\n    this.index = options.index;\n    if (options.open) {\n      this.oldMethod(\"open\");\n    }\n    this.sockets = [];\n    this.app = void 0;\n    this.lr = void 0;\n    this.run();\n  }\n\n  ConnectApp.prototype.run = function() {\n    this.app = connect();\n    this.handlers().forEach((function(_this) {\n      return function(middleware) {\n        if (typeof middleware === \"object\") {\n          return _this.app.use(middleware[0], middleware[1]);\n        } else {\n          return _this.app.use(middleware);\n        }\n      };\n    })(this));\n    this.app.use(connect.directory(typeof this.root === \"object\" ? this.root[0] : this.root));\n    if (this.https) {\n      if (typeof this.https === 'boolean' || !this.https.key) {\n        if (!(typeof this.https === \"object\")) {\n          this.https = {};\n        }\n        this.https.key = fs.readFileSync(__dirname + '/certs/server.key');\n        this.https.cert = fs.readFileSync(__dirname + '/certs/server.crt');\n        this.https.ca = fs.readFileSync(__dirname + '/certs/server.crt');\n        this.https.passphrase = 'gulp';\n      }\n      this.server = (http2 || https).createServer(this.https, this.app);\n    } else {\n      this.server = http.createServer(this.app);\n    }\n    if (this.serverInit) {\n      this.serverInit(this.server);\n    }\n    return this.server.listen(this.port, (function(_this) {\n      return function(err) {\n        var sockets, stopServer, stoped;\n        if (err) {\n          return _this.log(\"Error on starting server: \" + err);\n        } else {\n          _this.log(_this.name + \" started http\" + (_this.https ? 's' : '') + \"://\" + _this.host + \":\" + _this.port);\n          stoped = false;\n          sockets = [];\n          _this.server.on(\"close\", function() {\n            if (!stoped) {\n              stoped = true;\n              return _this.log(_this.name + \" stopped\");\n            }\n          });\n          _this.server.on(\"connection\", function(socket) {\n            _this.logDebug(\"Received incoming connection from \" + (socket.address().address));\n            _this.sockets.push(socket);\n            return socket.on(\"close\", function() {\n              return _this.sockets.splice(_this.sockets.indexOf(socket), 1);\n            });\n          });\n          _this.server.on(\"request\", function(request, response) {\n            return _this.logDebug(\"Received request \" + request.method + \" \" + request.url);\n          });\n          _this.server.on(\"error\", function(err) {\n            return _this.log(err.toString());\n          });\n          stopServer = function() {\n            if (!stoped) {\n              _this.sockets.forEach(function(socket) {\n                return socket.destroy();\n              });\n              _this.server.close();\n              return process.nextTick(function() {\n                return process.exit(0);\n              });\n            }\n          };\n          process.on(\"SIGINT\", stopServer);\n          process.on(\"exit\", stopServer);\n          if (_this.livereload) {\n            tiny_lr.Server.prototype.error = function() {};\n            if (_this.https) {\n              _this.lr = tiny_lr({\n                key: _this.https.key || fs.readFileSync(__dirname + '/certs/server.key'),\n                cert: _this.https.cert || fs.readFileSync(__dirname + '/certs/server.crt')\n              });\n            } else {\n              _this.lr = tiny_lr();\n            }\n            _this.lr.listen(_this.livereload.port);\n            return _this.log(\"LiveReload started on port \" + _this.livereload.port);\n          }\n        }\n      };\n    })(this));\n  };\n\n  ConnectApp.prototype.handlers = function() {\n    var steps;\n    steps = this.middleware ? this.middleware.call(this, connect, this) : [];\n    if (this.livereload) {\n      if (typeof this.livereload === \"boolean\") {\n        this.livereload = {};\n      }\n      if (!this.livereload.port) {\n        this.livereload.port = 35729;\n      }\n      steps.unshift(liveReload(this.livereload));\n    }\n    if (this.index === true) {\n      this.index = \"index.html\";\n    }\n    if (typeof this.root === \"object\") {\n      this.root.forEach(function(path) {\n        return steps.push(connect[\"static\"](path, {\n          index: this.index\n        }));\n      });\n    } else {\n      steps.push(connect[\"static\"](this.root, {\n        index: this.index\n      }));\n    }\n    if (this.fallback) {\n      steps.push((function(_this) {\n        return function(req, res) {\n          var fallbackPath;\n          fallbackPath = _this.fallback;\n          if (typeof _this.fallback === \"function\") {\n            fallbackPath = _this.fallback(req, res);\n          }\n          return require('fs').createReadStream(fallbackPath).pipe(res);\n        };\n      })(this));\n    }\n    return steps;\n  };\n\n  ConnectApp.prototype.log = function(text) {\n    if (!this.silent) {\n      return util.log(util.colors.green(text));\n    }\n  };\n\n  ConnectApp.prototype.logWarning = function(text) {\n    if (!this.silent) {\n      return util.log(util.colors.yellow(text));\n    }\n  };\n\n  ConnectApp.prototype.logDebug = function(text) {\n    if (this.debug) {\n      return util.log(util.colors.blue(text));\n    }\n  };\n\n  ConnectApp.prototype.oldMethod = function(type) {\n    var text;\n    text = 'does not work in gulp-connect v 2.*. Please read \"readme\" https://github.com/AveVlad/gulp-connect';\n    switch (type) {\n      case \"open\":\n        return this.logWarning(\"Option open \" + text);\n    }\n  };\n\n  return ConnectApp;\n\n})();\n\nmodule.exports = {\n  server: function(options) {\n    var app;\n    if (options == null) {\n      options = {};\n    }\n    app = new ConnectApp(options);\n    apps.push(app);\n    return app;\n  },\n  reload: function() {\n    return es.map(function(file, callback) {\n      apps.forEach((function(_this) {\n        return function(app) {\n          if (app.livereload && typeof app.lr === \"object\") {\n            return app.lr.changed({\n              body: {\n                files: file.path\n              }\n            });\n          }\n        };\n      })(this));\n      return callback(null, file);\n    });\n  },\n  serverClose: function() {\n    apps.forEach(function(app) {\n      return app.server.close();\n    });\n    return apps = [];\n  }\n};\n"}